generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  password        String?
  name            String
  tokens          String[]
  buildings       BuildingEditors[]
  isEmailVerified Boolean
  BuildingGroup   BuildingGroup[]
}

model Floor {
  id                  Int      @id @default(autoincrement())
  areas               Area[]
  title               String
  description         String
  building            Building @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId          Int
  shape               Json?
  navMesh             Json?
  voronoiNavMesh      Json?
  walls               Json?
  floorPerimeterWalls Json?
  guideImage          String?
  guideImageShape     Json?
  guideImageRotation  Float?
}

model Building {
  id              Int               @id @default(autoincrement())
  title           String
  address         String
  startLat        Float
  startLon        Float
  floors          Floor[]
  editors         BuildingEditors[]
  areas           Area[]
  buildingGroup   BuildingGroup?     @relation(fields: [buildingGroupId], references: [id])
  buildingGroupId Int?
}

model Area {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  shape       Json
  traversable Boolean
  category    String
  floor       Floor     @relation(fields: [floorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  floorId     Int
  entrances   Json?
  building    Building? @relation(fields: [buildingId], references: [id])
  buildingId  Int?
}

enum EditorLevel {
  viewer
  editor
  owner
}

// Join table used to connect buildings and users
model BuildingEditors {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  building    Building    @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId  Int
  editorLevel EditorLevel
  timestamp   DateTime    @default(now())
}

// Join table used to connect buildings and users
model BuildingGroup {
  id        Int        @id @default(autoincrement())
  name      String
  buildings Building[]
  userId    Int
  creator   User       @relation(fields: [userId], references: [id])
  timestamp DateTime   @default(now())
}
