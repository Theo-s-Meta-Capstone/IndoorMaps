# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Area {
  category: String!
  databaseId: Int!
  description: String!
  entrances: String
  floorDatabaseId: Int!
  id: ID!
  shape: String!
  title: String!
  traversable: Boolean!
}

input AreaCreateInput {
  buildingDatabaseId: Float!
  category: String
  description: String!
  floorDatabseId: Int!
  shape: String!
  title: String!
}

input AreaModifyInput {
  category: String
  description: String

  """
  If New Shape is null there is no update, otherwise shape is updated to the shape inside of NewShape
  """
  entrances: NewShape
  id: Int!
  shape: String
  title: String
  traversable: Boolean
}

input AreaSearchInput {
  id: Float!
  query: String!
}

input AreaUniqueInput {
  id: Int!
}

type Autocomplete {
  items: [AutocompleteItem!]!
}

type AutocompleteAddress {
  countryCode: String
  countryName: String
  label: String
  postalCode: String
  state: String
  stateCode: String
}

input AutocompleteInput {
  p: String
}

type AutocompleteItem {
  address: AutocompleteAddress
  highlights: TitleHighlightsRange
  id: String!
  resultType: String
  title: String!
}

type Building {
  address: String!
  databaseId: Int!
  floors: [Floor!]!
  id: ID!
  startPos: LatLng!
  title: String!
}

input BuildingCreateInput {
  address: String!
  startLat: Float!
  startLon: Float!
  title: String!
}

input BuildingSearchInput {
  searchQuery: String
}

input BuildingUniqueInput {
  id: Float!
}

input BuildingUpdateInput {
  address: String!
  buildingDatabseId: Int!
  startLat: Float!
  startLon: Float!
  title: String!
}

type BuildingWithPerms {
  building: Building!
  editorLevel: EditorLevel!
  id: ID!
}

enum EditorLevel {
  editor
  owner
  viewer
}

type Floor {
  areas: [Area!]!
  databaseId: Int!
  description: String!
  id: ID!
  shape: String
  title: String!
}

input FloorCreateInput {
  buildingDatabseId: Int!
  description: String!
  title: String!
}

input FloorModifyInput {
  description: String
  id: Int!

  """
  If New Shape is null there is no update, otherwise shape is updated to the shape inside of NewShape
  """
  newShape: NewShape
  title: String
}

input FloorUniqueInput {
  id: Int!
}

type HighlightsRange {
  end: Int
  start: Int
}

input InviteEditorInput {
  id: Float!
  invitedUser: String!
}

type LatLng {
  lat: Float!
  lon: Float!
}

type LiveLocation {
  buildingDatabaseId: Int!
  id: ID!
  latitude: Float!
  longitude: Float!
  message: String!
  name: String!
}

input LiveLocationInput {
  id: Float!
  latitude: Float!
  longitude: Float!
  message: String!
  name: String!
}

input LocationLookupInput {
  id: String
}

type LogedInUser {
  id: ID!
  isLogedIn: Boolean!
  user: User
}

type Mutation {
  createArea(data: AreaCreateInput!): NewAreaResult!
  createBuilding(data: BuildingCreateInput!): Building!
  createFloor(data: FloorCreateInput!): NewFloorResult!
  deleteArea(data: AreaUniqueInput!): NewAreaResult!
  inviteEditor(data: InviteEditorInput!): MutationResult!
  modifyArea(data: AreaModifyInput!): NewAreaResult!
  modifyFloor(data: FloorModifyInput!): Floor!
  setLocation(data: LiveLocationInput!): MutationResult!
  signOut: SignedOutSuccess!
  signinUser(data: UserLoginInput!): User!
  signupUser(data: UserCreateInput!): User!
  updateBuilding(data: BuildingUpdateInput!): Building!
}

type MutationResult {
  success: Boolean!
}

input NavigationInput {
  areaFromId: Int
  areaToId: Int
  floorDatabaseId: Int!
  locationFromLat: Float
  locationFromLon: Float
  locationToLat: Float
  locationToLon: Float
  pathfindingMethod: PathfindingMethod
}

type NavigationResult {
  distance: Float!
  navMesh: String!
  neededToGenerateANavMesh: Boolean!
  path: [LatLng!]!
  walls: String!
}

type NewAreaResult {
  databaseId: Int!
  floorDatabaseId: Int!
  success: Boolean!
}

type NewFloorResult {
  buildingDatabaseId: Int!
  databaseId: Int!
  success: Boolean!
}

input NewShape {
  shape: String
}

enum PathfindingMethod {
  Standard
  Voronoi
}

type Query {
  allBuildings(data: BuildingSearchInput!): [Building!]!
  allUsers: [User!]!
  areaSearch(data: AreaSearchInput!): [Area!]!
  getArea(data: AreaUniqueInput!): Area!
  getAutocomplete(data: AutocompleteInput!): Autocomplete!
  getBuilding(data: BuildingUniqueInput!): Building!
  getFloor(data: FloorUniqueInput!): Floor!
  getLocationLookup(data: LocationLookupInput!): LatLng
  getNavBetweenAreas(data: NavigationInput!): NavigationResult!
  getUserFromCookie: LogedInUser!
}

type SignedOutSuccess {
  success: Boolean!
}

type Subscription {
  newLiveLocation(data: BuildingUniqueInput!): LiveLocation!
}

type TitleHighlightsRange {
  title: [HighlightsRange!]
}

type User {
  BuildingWithPerms: [BuildingWithPerms!]!
  databaseId: Float!
  email: String!
  id: ID!
  isEmailVerified: Boolean!
  name: String!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}

input UserLoginInput {
  email: String!
  password: String!
}